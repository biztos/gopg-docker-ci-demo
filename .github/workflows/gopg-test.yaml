# Hmm, better with image or without image?  Seems fine here without, and if
# not running a custom image what's the point?
#
# Coverage is a bit tricky.  Have some badge-makers and so on... or can just
# upload to coveralls for a public repo.
#
# Makes me wonder, is there an easier way to do this?  Maybe make a simple
# graph in Javascript showing all the functions, or something?  More work than
# I have time for, but anyway I want a solution here that will give me access
# somewhere, anywhere, online to the coverage report; and also give me a damn
# badge!  Ideally without using crashy marketplace actions, nor wonky setups,
# nor external services.
name: Go/Pg Demo CI
on: push

jobs:
  test-job:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres

        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20.1'

      # NOTE: separate build and test sections are nice for compartmentalizing
      # the results, but also a waste of time.  If every second counts, then
      # just go with the coverage test.
      - name: Build
        run: go build ./...

      - name: Run tests
        run: go test -v ./...
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - name: Generate coverage profile
        run: go test -coverprofile=cover.out ./...
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - name: Generate HTML coverage report
        run: go tool cover -html=cover.out -o=cover.html

      - name: Upload Go coverage report
        uses: actions/upload-artifact@v3
        with:
          name: Go-coverage
          path: cover.html
